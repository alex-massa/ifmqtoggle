#!/bin/sh

INSTANCE=$1
LOCKFILE="/tmp/lockfile_$$"
SHOULD_EXIT=false

TGT_IFACE=$(uci -q get ifmqtoggle."$INSTANCE".iface)
#WAN_IFACE=$(ip route | awk '/default/ { print $5 }')  # unused, left for future reference

MQTT_BROKER_HOST=$(uci -q get ifmqtoggle."$INSTANCE".mqtt_broker_host)
MQTT_BROKER_PORT=$(uci -q get ifmqtoggle."$INSTANCE".mqtt_broker_port)
MQTT_TOPIC=$(uci -q get ifmqtoggle."$INSTANCE".mqtt_topic)
MQTT_USERNAME=$(uci -q get ifmqtoggle."$INSTANCE".mqtt_username)
MQTT_PASSWORD=$(uci -q get ifmqtoggle."$INSTANCE".mqtt_password)
MQTT_OPTIONS=$(uci -q get ifmqtoggle."$INSTANCE".mqtt_options)

MQTT_AUTH=""
if [ -n "$MQTT_USERNAME" ]; then
    MQTT_AUTH="$MQTT_AUTH -u $MQTT_USERNAME"
fi
if [ -n "$MQTT_PASSWORD" ]; then
    MQTT_AUTH="$MQTT_AUTH -P $MQTT_PASSWORD"
fi

tmp=$(uci -q get ifmqtoggle."$INSTANCE".mqtt_broker_retry_delay)
MQTT_BROKER_RETRY_DELAY=${tmp:-5}

cleanup() {
    echo "[$INSTANCE] Cleaning up process "$MQTT_SUB_PID"..."
    kill "$MQTT_SUB_PID" 2>/dev/null
    wait "$MQTT_SUB_PID" 2>/dev/null || true
    rm -f "$LOCKFILE"
    echo "[$INSTANCE]" "Cleanup complete"
    SHOULD_EXIT=true
}
trap cleanup TERM

handle_message() {
    message="$1"

    # check for valid JSON message
    if ! echo "$message" | jq . >/dev/null 2>&1; then
        echo "[$INSTANCE]" "Invalid message format, expected valid JSON"
        return
    fi

    # check for valid JSON payload
    payload=$(echo "$message" | jq -r '.payload')
    if ! echo "$payload" | jq . >/dev/null 2>&1; then
        echo "[$INSTANCE]" "Invalid 'payload' JSON object"
        return
    fi

    # parse "active" value from JSON object
    active=$(echo "$payload" | jq -r '.active')
    # check value of "active" and trigger actions accordingly
    if [ "$active" = "true" ]; then
        echo "[$INSTANCE]" "ACTION: Restart ${TGT_IFACE} interface"
        ubus call network.interface."${TGT_IFACE}" up
    elif [ "$active" = "false" ]; then
        echo "[$INSTANCE]" "ACTION: Stop ${TGT_IFACE} interface"
        ubus call network.interface."${TGT_IFACE}" down
    else
        echo "[$INSTANCE]" "Invalid value $active for 'active', expected 'true' or 'false'"
    fi
}

while true; do
    echo "[$INSTANCE]" "Starting MQTT subscriber for topic $MQTT_TOPIC on broker $MQTT_BROKER_HOST:$MQTT_BROKER_PORT"
    exec 3< <(mosquitto_sub -F "%j" -h "$MQTT_BROKER_HOST" -p "$MQTT_BROKER_PORT" -t "$MQTT_TOPIC" $(echo "$MQTT_AUTH" | xargs) $(echo "$MQTT_OPTIONS" | xargs) & pid=$!; echo $pid)
    read -r MQTT_SUB_PID <&3
    while read -r message <&3; do
        echo "[$INSTANCE]" "Received message: $message"
        if [ ! -f $LOCKFILE ]; then
            touch $LOCKFILE
            if ! kill -0 $HANDLE_MESSAGE_PID 2>/dev/null; then
                handle_message "$message" &
                HANDLE_MESSAGE_PID=$!
            else
                echo "[$INSTANCE]" "The previous operation[$HANDLE_MESSAGE_PID] is still running, discarding message"
            fi
            rm -f $LOCKFILE
        fi
    done
    if [ "$SHOULD_EXIT" = true ]; then
        break
    fi
    echo "[$INSTANCE]" "Connection to MQTT broker failed, retrying in $MQTT_BROKER_RETRY_DELAY seconds..."
    sleep "$MQTT_BROKER_RETRY_DELAY"
done
